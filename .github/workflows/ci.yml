name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 22.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run unit tests
      run: npm run test:unit:run

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/coverage-final.json
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Build library
      run: npm run build

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Build library
      run: npm run build

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Determine version bump
      id: version
      run: |
        # Get commit messages since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        COMMITS=$(git log --oneline ${LAST_TAG}..HEAD 2>/dev/null || echo "")

        # Determine bump type based on commit messages
        if echo "$COMMITS" | grep -q "BREAKING CHANGE\|!:"; then
          echo "bump=major" >> $GITHUB_OUTPUT
          echo "reason=BREAKING CHANGE detected" >> $GITHUB_OUTPUT
        elif echo "$COMMITS" | grep -q "feat:"; then
          echo "bump=minor" >> $GITHUB_OUTPUT
          echo "reason=New features detected" >> $GITHUB_OUTPUT
        elif echo "$COMMITS" | grep -q "fix:"; then
          echo "bump=patch" >> $GITHUB_OUTPUT
          echo "reason=Bug fixes detected" >> $GITHUB_OUTPUT
        else
          echo "bump=patch" >> $GITHUB_OUTPUT
          echo "reason=No conventional commits, defaulting to patch" >> $GITHUB_OUTPUT
        fi

    - name: Version bump and publish
      run: |
        echo "Version bump reason: ${{ steps.version.outputs.reason }}"
        echo "Bump type: ${{ steps.version.outputs.bump }}"

        # Bump version
        npm version ${{ steps.version.outputs.bump }} --no-git-tag-version

        # Get new version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "New version: $NEW_VERSION"

        # Commit version change
        git add package.json package-lock.json
        git commit -m "chore: release v${NEW_VERSION}"

        # Create and push tag
        git tag "v${NEW_VERSION}"
        git push origin main
        git push origin "v${NEW_VERSION}"

        # Publish to NPM
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
